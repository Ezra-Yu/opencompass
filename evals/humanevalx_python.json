{"task_id": "Python/0", "generation": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "Python/1", "generation": "    paren_string = paren_string.replace(\" \", \"\")\n    paren_list = []\n    paren_stack = []\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            paren_stack.pop()\n            if not paren_stack:\n                paren_list.append(\"\".join(paren_stack))\n                paren_stack = []\n    return paren_list\n\n"}
{"task_id": "Python/2", "generation": "    return number - int(number)\n\n"}
{"task_id": "Python/3", "generation": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "Python/4", "generation": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "Python/5", "generation": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result\n\n"}
{"task_id": "Python/6", "generation": "    pass\n\n"}
{"task_id": "Python/7", "generation": "    return [string for string in strings if substring in string]\n\n"}
{"task_id": "Python/8", "generation": "    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n"}
{"task_id": "Python/9", "generation": "    result = []\n    max_value = numbers[0]\n    for number in numbers:\n        result.append(max_value)\n        if number > max_value:\n            max_value = number\n    return result\n\n"}
{"task_id": "Python/10", "generation": "    if is_palindrome(string):\n        return string\n    suffix = longest_palindrome_suffix(string)\n    prefix = string[: len(string) - len(suffix)]\n    return prefix + suffix[::-1]\n\n"}
{"task_id": "Python/11", "generation": "    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n"}
{"task_id": "Python/12", "generation": "    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_len)\n\n"}
{"task_id": "Python/13", "generation": "    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "Python/14", "generation": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[: i + 1])\n    return prefixes\n\n"}
{"task_id": "Python/15", "generation": "    return \" \".join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "Python/16", "generation": "    return len(set(string))\n\n"}
{"task_id": "Python/17", "generation": "    pass\n\n"}
{"task_id": "Python/18", "generation": "    return len(string) - len(string.replace(substring, \"\"))\n\n"}
{"task_id": "Python/19", "generation": "    numbers = numbers.split()\n    numbers.sort()\n    return \" \".join(numbers)\n\n"}
{"task_id": "Python/20", "generation": "    return min(numbers), max(numbers)\n\n"}
{"task_id": "Python/21", "generation": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"}
{"task_id": "Python/22", "generation": "    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "Python/23", "generation": "    return len(string)\n\n"}
{"task_id": "Python/24", "generation": "    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "Python/25", "generation": "    factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n                break\n    return factors\n\n"}
{"task_id": "Python/26", "generation": "    return list(set(numbers))\n\n"}
{"task_id": "Python/27", "generation": "    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n\n"}
{"task_id": "Python/28", "generation": "    return \"\".join(strings)\n\n"}
{"task_id": "Python/29", "generation": "    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "Python/30", "generation": "    return [x for x in l if x > 0]\n\n"}
{"task_id": "Python/31", "generation": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "Python/32", "generation": "    if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n    if len(xs) == 2:\n        return -xs[1] / xs[0]\n    else:\n        return find_zero(xs[1:]) - poly(xs[:-1], find_zero(xs[1:])) / xs[-1]\n\n"}
{"task_id": "Python/33", "generation": "    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n    l_copy.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_copy[i]\n    return l\n\n"}
{"task_id": "Python/34", "generation": "    return sorted(set(l))\n\n"}
{"task_id": "Python/35", "generation": "    return max(l)\n\n"}
{"task_id": "Python/36", "generation": "    return sum(\n        1\n        for i in range(1, n)\n        if (i % 11 == 0 or i % 13 == 0) and str(i).count(\"7\")\n    )\n\n"}
{"task_id": "Python/37", "generation": "    return l\n\n"}
{"task_id": "Python/38", "generation": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "Python/39", "generation": "    fib = 1\n    while not is_prime(fib):\n        fib = fib + 1\n    return fib\n\n"}
{"task_id": "Python/40", "generation": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"}
{"task_id": "Python/41", "generation": "    return 0\n\n"}
{"task_id": "Python/42", "generation": "    return [x + 1 for x in l]\n\n"}
{"task_id": "Python/43", "generation": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0 and i != j:\n                return True\n    return False\n\n"}
{"task_id": "Python/44", "generation": "    if base < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "Python/45", "generation": "    return a * h / 2\n\n"}
{"task_id": "Python/46", "generation": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n == 4:\n        return 2\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"}
{"task_id": "Python/47", "generation": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n"}
{"task_id": "Python/48", "generation": "    return text == text[::-1]\n\n"}
{"task_id": "Python/49", "generation": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return (modp(n - 1, p) * 2) % p\n\n"}
{"task_id": "Python/50", "generation": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "Python/51", "generation": "    vowels = \"aeiou\"\n    return \"\".join([char for char in text if char not in vowels])\n\n"}
{"task_id": "Python/52", "generation": "    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "Python/53", "generation": "    return x + y\n\n"}
{"task_id": "Python/54", "generation": "    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "Python/55", "generation": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "Python/56", "generation": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "Python/57", "generation": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "Python/58", "generation": "    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "Python/59", "generation": "    largest_factor = 0\n    for i in range(2, n):\n        if n % i == 0:\n            largest_factor = i\n    return largest_factor\n\n"}
{"task_id": "Python/60", "generation": "    return n * (n + 1) // 2\n\n"}
{"task_id": "Python/61", "generation": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "Python/62", "generation": "    return [i * x for i, x in enumerate(xs[1:], start=1)]\n\n"}
{"task_id": "Python/63", "generation": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n"}
{"task_id": "Python/64", "generation": "    vowels = \"aeiou\"\n    return sum(s.count(v) for v in vowels) + s.count(\"y\") if s.endswith(\"y\") else sum(s.count(v) for v in vowels)\n"}
{"task_id": "Python/65", "generation": "    digits = list(str(x))\n    shift = shift % len(digits)\n    digits = digits[shift:] + digits[:shift]\n    return \"\".join(digits)\n\n"}
{"task_id": "Python/66", "generation": "    return sum(ord(c) for c in s if c.isupper())\n\n"}
{"task_id": "Python/67", "generation": "    \n    fruits = s.split()\n    \n    if len(fruits) == 2:\n        return int(fruits[1])\n    \n    if len(fruits) == 3:\n        return int(fruits[2])\n    \n    if len(fruits) == 4:\n        return int(fruits[3])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "Python/68", "generation": "    if not arr:\n        return []\n\n    smallest_even = arr[0]\n    smallest_even_index = 0\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_even_index = i\n\n    return [smallest_even, smallest_even_index]\n\n"}
{"task_id": "Python/69", "generation": "    if len(lst) == 0:\n        return -1\n    \n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    max_freq = max(freq.values())\n    \n    for i in freq:\n        if freq[i] >= i:\n            return i\n    \n    return -1\n\n"}
{"task_id": "Python/70", "generation": "    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    lst = sorted(lst)\n    return lst[::-1]\n\n"}
{"task_id": "Python/71", "generation": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / (2 * math.sqrt(a ** 2 + b ** 2 + c ** 2)), 2)\n    else:\n        return -1\n\n"}
{"task_id": "Python/72", "generation": "    if sum(q) <= w:\n        if q == q[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "Python/73", "generation": "    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1 if arr[0] != arr[1] else 0\n\n    # find the midpoint\n    mid = len(arr) // 2\n\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    left_change = smallest_change(left_arr)\n    right_change = smallest_change(right_arr)\n\n    if left_arr == right_arr[::-1]:\n        return left_change\n\n    if left_arr[::-1] == right_arr:\n        return right_change\n\n    if left_arr[0] == right_arr[-1]:\n        return min(left_change, right_change) + 1\n\n    return min(left_change, right_change) + 2\n\n"}
{"task_id": "Python/74", "generation": "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0 or len(lst2) == 0:\n        return lst1 if len(lst1) == 0 else lst2\n    else:\n        return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2\n\n"}
{"task_id": "Python/75", "generation": "    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a / i):\n                return True\n    return False\n\n"}
{"task_id": "Python/76", "generation": "    return n ** int(x) == x\n\n"}
{"task_id": "Python/77", "generation": "    return a == cube(a)\n\n"}
{"task_id": "Python/78", "generation": "    count = 0\n    for i in num:\n        if i in \"2357BDEF\":\n            count += 1\n    return count\n\n"}
{"task_id": "Python/79", "generation": "    binary = bin(decimal)\n    binary = binary[2:]\n    binary = \"db\" + binary + \"db\"\n    return binary\n\n"}
{"task_id": "Python/80", "generation": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"}
{"task_id": "Python/81", "generation": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\n"}
{"task_id": "Python/82", "generation": "    if len(string) == 1:\n        return False\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    elif len(string) == 4:\n        return False\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n\n"}
{"task_id": "Python/83", "generation": "    return sum(1 for i in range(1, n + 1) if i % 10 == 1 or i // 10 == 1)\n\n"}
{"task_id": "Python/84", "generation": "    return bin(N)[2:]\n\n"}
{"task_id": "Python/85", "generation": "    return sum(lst[1::2])\n\n"}
{"task_id": "Python/86", "generation": "    return \" \".join(sorted(s.split(), key=lambda x: \"\".join(sorted(x))))\n\n"}
{"task_id": "Python/87", "generation": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    return result\n\n"}
{"task_id": "Python/88", "generation": "    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] > array[1]:\n            return [array[1], array[0]]\n        else:\n            return array\n    if len(array) > 2:\n        if sum(array[:2]) % 2 == 0:\n            return sort_array(array[1:]) + [array[0]]\n        else:\n            return sort_array(array[1:]) + [array[0]]\n\n"}
{"task_id": "Python/89", "generation": "    return \"\".join([chr(ord(c) + 2 * 2) for c in s])\n\n"}
{"task_id": "Python/90", "generation": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    lst.sort()\n    if lst[0] != lst[1]:\n        return lst[1]\n    else:\n        return next_smallest(lst[1:])\n\n"}
{"task_id": "Python/91", "generation": "    bored = 0\n    for i in range(len(S)):\n        if S[i : i + 2] == \"I \":\n            bored += 1\n    return bored\n\n"}
{"task_id": "Python/92", "generation": "    if x == y + z or x == z + y:\n        return True\n    else:\n        return False\n"}
{"task_id": "Python/93", "generation": "    return \"\".join(\n        [\n            chr(ord(char) + 2) if char in \"aeiouAEIOU\" else chr(ord(char) + 1)\n            for char in message\n        ]\n    )\n\n"}
{"task_id": "Python/94", "generation": "    return sum(list(map(int, str(max(list(filter(lambda x: x > 1, [i for i in lst if i > 0])))))))\n\n"}
{"task_id": "Python/95", "generation": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key) != str:\n            return False\n        if key.isupper():\n            return False\n        if key.islower():\n            continue\n        else:\n            return False\n    return True\n\n"}
{"task_id": "Python/96", "generation": "    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes\n\n"}
{"task_id": "Python/97", "generation": "    return a * b % 10\n\n"}
{"task_id": "Python/98", "generation": "    return sum(1 for c in s[0::2] if c in \"AEIOU\")\n\n"}
{"task_id": "Python/99", "generation": "    return round(float(value))\n\n"}
{"task_id": "Python/100", "generation": "    return [n] + [n + 2 * i for i in range(n - 1)]\n\n"}
{"task_id": "Python/101", "generation": "    return s.split(\",\")\n\n"}
{"task_id": "Python/102", "generation": "    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n        return choose_num(x + 1, y)\n\n"}
{"task_id": "Python/103", "generation": "    if n > m:\n        return -1\n    return bin(round(sum(range(n, m + 1)) / (m - n + 1)))\n\n"}
{"task_id": "Python/104", "generation": "    return sorted(set(x) - set(filter(lambda x: any(map(lambda y: y % 2 == 0, str(x))), set(x))))\n\n"}
{"task_id": "Python/105", "generation": "    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        if arr[0] == 1 or arr[0] == 2 or arr[0] == 3 or arr[0] == 4 or arr[0] == 5 or arr[0] == 6 or arr[0] == 7 or arr[0] == 8 or arr[0] == 9:\n            return [\"One\"]\n        else:\n            return []\n    if len(arr) == 2:\n        if arr[0] == 1 or arr[0] == 2 or arr[0] == 3 or arr[0] == 4 or arr[0] == 5 or arr[0] == 6 or arr[0] == 7 or arr[0] == 8 or arr[0] == 9:\n            if arr[1] == 1 or arr[1] == 2 or arr[1] == 3 or arr[1] == 4 or arr[1] == 5 or arr[1] == 6 or arr[1] == 7 or arr[1] == 8 or arr[1] == 9:\n                return [\"One\", \"One\"]\n            else:\n                return []\n        else:\n            return []\n    if len(arr) == 3:\n        if arr[0] == 1 or arr[0] == 2 or arr[0] == 3 or arr[0] == 4 or arr[0] == 5 or arr[0] == 6 or arr[0] == 7 or arr[0] == 8 or arr[0] == 9:\n            if arr[1] == 1 or arr[1] == 2 or arr[1] == 3 or arr[1] == 4 or arr[1] == 5 or arr[1] == 6 or arr[1] == 7 or arr[1] == 8 or arr[1] == 9:\n                if arr[2] == 1 or arr[2] == 2 or arr[2] == 3 or arr[2] == 4 or arr[2] == 5 or arr[2] == 6 or"}
{"task_id": "Python/106", "generation": "    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n\n"}
{"task_id": "Python/107", "generation": "    if n < 1 or n > 1000:\n        raise ValueError(\"n must be in range [1, 1000]\")\n\n    even_palindrome = 0\n    odd_palindrome = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n\n    return even_palindrome, odd_palindrome\n\n"}
{"task_id": "Python/108", "generation": "    return sum(1 for x in arr if sum(int(i) for i in str(x)) > 0)\n\n"}
{"task_id": "Python/109", "generation": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "Python/110", "generation": "    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2 != 0:\n            return \"NO\"\n    return \"YES\"\n\n"}
{"task_id": "Python/111", "generation": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n\n"}
{"task_id": "Python/112", "generation": "    for i in c:\n        s = s.replace(i,'')\n    return s,s==s[::-1]\n"}
{"task_id": "Python/113", "generation": "    return [\n        \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            len(re.findall(\"[13579]\", s)),\n            len(re.findall(\"[13579]\", s)),\n            len(re.findall(\"[13579]\", s)),\n            len(re.findall(\"[13579]\", s)),\n        )\n        for s in lst\n    ]\n\n"}
{"task_id": "Python/114", "generation": "    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n\n"}
{"task_id": "Python/115", "generation": "    \n    # Initialize variables\n    bucket_capacity = capacity\n    buckets = 0\n    \n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 1:\n                buckets += math.ceil(row[i] / bucket_capacity)\n    \n    return buckets\n\n"}
{"task_id": "Python/116", "generation": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n\n"}
{"task_id": "Python/117", "generation": "    return [word for word in s.split() if len(set(word) & set(string.ascii_lowercase)) == n]\n\n"}
{"task_id": "Python/118", "generation": "    vowels = \"AEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "Python/119", "generation": "    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n"}
{"task_id": "Python/120", "generation": "    return heapq.nlargest(k, arr)\n\n"}
{"task_id": "Python/121", "generation": "    return sum(lst[::2]) if len(lst) % 2 == 0 else sum(lst[1::2])\n\n"}
{"task_id": "Python/122", "generation": "    return sum(arr[:k])\n\n"}
{"task_id": "Python/123", "generation": "    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    odd_collatz = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        odd_collatz.append(n)\n    return sorted(odd_collatz)\n\n"}
{"task_id": "Python/124", "generation": "    if date == \"\":\n        return False\n    else:\n        date_list = date.split(\"-\")\n        if len(date_list) != 3:\n            return False\n        else:\n            month = int(date_list[0])\n            day = int(date_list[1])\n            year = int(date_list[2])\n            if month < 1 or month > 12:\n                return False\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n                if day < 1 or day > 31:\n                    return False\n            elif month in [4, 6, 9, 11]:\n                if day < 1 or day > 30:\n                    return False\n            elif month == 2:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                return False\n    return True\n\n"}
{"task_id": "Python/125", "generation": "    return txt.split()\n\n"}
{"task_id": "Python/126", "generation": "    if len(lst) == 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n\n"}
{"task_id": "Python/127", "generation": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_end - intersection_start == 0:\n        return \"NO\"\n    intersection_length = intersection_end - intersection_start\n    if is_prime(intersection_length):\n        return \"YES\"\n    return \"NO\"\n\n"}
{"task_id": "Python/128", "generation": "    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    return sum(x * y for x, y in zip(arr, signs))\n\n"}
{"task_id": "Python/129", "generation": "    n = len(grid)\n    if n == 1:\n        return [grid[0][0]]\n    if k == 1:\n        return [grid[0][0], grid[0][1]]\n    if k == 2:\n        return [grid[0][0], grid[1][0]]\n    if k == 3:\n        return [grid[0][0], grid[1][0], grid[0][1]]\n    if k == 4:\n        return [grid[0][0], grid[1][0], grid[0][1], grid[1][1]]\n    if k == 5:\n        return [grid[0][0], grid[1][0], grid[0][1], grid[1][1], grid[0][2]]\n    if k == 6:\n        return [grid[0][0], grid[1][0], grid[0][1], grid[1][1], grid[0][2], grid[1][2]]\n    if k == 7:\n        return [grid[0][0], grid[1][0], grid[0][1], grid[1][1], grid[0][2], grid[1][2], grid[2][0]]\n    if k == 8:\n        return [\n            grid[0][0],\n            grid[1][0],\n            grid[0][1],\n            grid[1][1],\n            grid[0][2],\n            grid[1][2],\n            grid[2][0],\n            grid[2][1],\n        ]\n    if k == 9:\n        return [\n            grid[0][0],\n            grid[1][0],\n            grid[0][1],\n            grid[1][1],\n            grid[0][2],\n            grid[1][2],\n            grid[2][0],\n            grid[2][1],\n            grid[2][2],\n        ]\n\n    def get_neighbors(i, j):\n        neighbors = []\n        if i > 0:\n            neighbors.append((i - 1, j))\n        if i < n - 1:\n            neighbors.append((i"}
{"task_id": "Python/130", "generation": "    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return [1] + tri(n - 1) + [1]\n    else:\n        return [1] + tri(n - 1) + [2] + tri(n - 2) + [1]\n\n"}
{"task_id": "Python/131", "generation": "    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 0:\n        return 0\n    product = 1\n    while n:\n        if n % 2:\n            product *= n % 10\n        n //= 10\n    return product\n\n"}
{"task_id": "Python/132", "generation": "    \n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) > 0\n\n"}
{"task_id": "Python/133", "generation": "    return sum(map(lambda x: x ** 2, map(ceil, lst)))\n\n"}
{"task_id": "Python/134", "generation": "    if len(txt) == 0:\n        return False\n    else:\n        if txt[-1].isalpha() and not txt[-1].isdigit():\n            return True\n        else:\n            return False\n\n"}
{"task_id": "Python/135", "generation": "    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        return 1\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                if arr[i] % arr[i - 1] == 0:\n                    return i\n        return -1\n\n"}
{"task_id": "Python/136", "generation": "    if len(lst) == 0:\n        return (None, None)\n    else:\n        neg_int = None\n        pos_int = None\n        for i in lst:\n            if i < 0:\n                if neg_int is None:\n                    neg_int = i\n                elif neg_int < i:\n                    neg_int = i\n            elif i > 0:\n                if pos_int is None:\n                    pos_int = i\n                elif pos_int > i:\n                    pos_int = i\n        return (neg_int, pos_int)\n\n"}
{"task_id": "Python/137", "generation": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n\n"}
{"task_id": "Python/138", "generation": "    if n % 2 == 1:\n        return False\n    for i in range(2, n // 2 + 1):\n        if n - i * 2 == 0:\n            return True\n    return False\n\n"}
{"task_id": "Python/139", "generation": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "Python/140", "generation": "    return re.sub(r\"\\s{2,}\", \"-\", re.sub(r\"\\s\", \"_\", text))\n\n"}
{"task_id": "Python/141", "generation": "    if len(file_name) > 3:\n        return \"No\"\n    elif \".\" not in file_name:\n        return \"No\"\n    elif not file_name[0].isalpha():\n        return \"No\"\n    elif file_name[0].isdigit():\n        return \"No\"\n    elif file_name[-4:] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n"}
{"task_id": "Python/142", "generation": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n"}
{"task_id": "Python/143", "generation": "    words = sentence.split()\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    primes_words = []\n    for word in words:\n        if len(word) in primes:\n            primes_words.append(word)\n    return \" \".join(primes_words)\n\n"}
{"task_id": "Python/144", "generation": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x = int(x[0]) / int(x[1])\n    n = int(n[0]) / int(n[1])\n    if x * n == int(x * n):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "Python/145", "generation": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n\n"}
{"task_id": "Python/146", "generation": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n\n"}
{"task_id": "Python/147", "generation": "    return sum(1 for i in range(1, n + 1) for j in range(i + 1, n + 1) for k in range(j + 1, n + 1) if (i * i - i + 1 + j * j - j + 1 + k * k - k) % 3 == 0)\n\n"}
{"task_id": "Python/148", "generation": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 == \"Mercury\":\n        if planet2 == \"Venus\":\n            return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Earth\":\n            return (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Mars\":\n            return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Jupiter\":\n            return (\"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Saturn\":\n            return (\"Uranus\", \"Neptune\")\n        if planet2 == \"Uranus\":\n            return (\"Neptune\")\n    if planet1 == \"Venus\":\n        if planet2 == \"Earth\":\n            return (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Mars\":\n            return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Jupiter\":\n            return (\"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Saturn\":\n            return (\"Uranus\", \"Neptune\")\n        if planet2 == \"Uranus\":\n            return (\"Neptune\")\n    if planet1 == \"Earth\":\n        if planet2 == \"Mars\":\n            return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Jupiter\":\n            return (\"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Saturn\":\n            return (\"Uranus\", \"Neptune\")\n        if planet2 == \"Uranus\":\n            return (\"Nept"}
{"task_id": "Python/149", "generation": "    return sorted(list(set(lst)), key=len)\n\n"}
{"task_id": "Python/150", "generation": "    if n % x == 0:\n        return x\n    else:\n        return y\n\n"}
{"task_id": "Python/151", "generation": "    \n    if len(lst) == 0:\n        return 0\n    \n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num ** 2\n    \n    return odd_sum\n\n"}
{"task_id": "Python/152", "generation": "    \n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "Python/153", "generation": "    extension_strength = {}\n    for extension in extensions:\n        extension_strength[extension] = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength[extension] += 1\n            else:\n                extension_strength[extension] -= 1\n    strongest_extension = max(extension_strength, key=extension_strength.get)\n    return class_name + \".\" + strongest_extension\n\n"}
{"task_id": "Python/154", "generation": "    if b in a or b in a[1:] or b in a[2:]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "Python/155", "generation": "    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "Python/156", "generation": "    if number < 1 or number > 1000:\n        raise ValueError(\"Input must be between 1 and 1000\")\n    if number == 1000:\n        return \"m\"\n    roman_numeral_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n    result = \"\"\n    for value, roman_numeral in roman_numeral_map.items():\n        while number >= value:\n            result += roman_numeral\n            number -= value\n    return result\n\n"}
{"task_id": "Python/157", "generation": "    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "Python/158", "generation": "    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            max_word = word\n    return max_word\n\n"}
{"task_id": "Python/159", "generation": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n"}
{"task_id": "Python/160", "generation": "    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Operator list must be one element shorter than operand list\")\n    if len(operand) < 2:\n        raise ValueError(\"Operand list must have at least two elements\")\n    if not all(isinstance(x, int) for x in operand):\n        raise ValueError(\"All elements of operand list must be integers\")\n    if not all(x >= 0 for x in operand):\n        raise ValueError(\"All elements of operand list must be non-negative\")\n    if not all(x in [\"+\", \"-\", \"*\", \"//\", \"**\"] for x in operator):\n        raise ValueError(\"All elements of operator list must be one of '+', '-', '*', '//', '**'\")\n\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            result += operand[i + 1]\n        elif operator[i] == \"-\":\n            result -= operand[i + 1]\n        elif operator[i] == \"*\":\n            result *= operand[i + 1]\n        elif operator[i] == \"//\":\n            result //= operand[i + 1]\n        elif operator[i] == \"**\":\n            result **= operand[i + 1]\n    return result\n\n"}
{"task_id": "Python/161", "generation": "    return \"\".join(\n        [\n            s[i].upper() if s[i].isalpha() else s[i].lower()\n            for i in range(len(s))\n        ]\n    )\n\n"}
{"task_id": "Python/162", "generation": "    if text == \"\":\n        return None\n    return hashlib.md5(text.encode(\"utf-8\")).hexdigest()\n\n"}
{"task_id": "Python/163", "generation": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
